---
title: "Introducci√≥n a R y RStudio"
author:   
  - name: Christian Ballejo
    orcid: 0000-0002-7346-5701
  - name: Tamara Ricardo
    orcid: 0000-0002-0921-2611
bibliography: references.bib
---

```{r}
#| echo: false
source("../setup.R")
```

[![Artwork por \@allison_horst](/images/358e3ecd-32dd-493b-a2b0-12bafabf186c.png){fig-align="center" width="80%"}](https://allisonhorst.com/)

## ¬øQu√© es R?

R [@base] es un lenguaje de programaci√≥n interpretado, orientado a objetos, multiplataforma y de c√≥digo abierto, dise√±ado espec√≠ficamente para el an√°lisis estad√≠stico de datos. Cuenta con estructuras y sintaxis propias, y una extensa colecci√≥n de funciones desarrolladas para aplicaciones estad√≠sticas.

-   Como lenguaje **orientado a objetos**, todo lo que manipulamos ‚Äîvariables, funciones, conjuntos de datos, resultados‚Äî se considera un objeto, lo que aporta flexibilidad y simplicidad al trabajo con informaci√≥n.

-   Al ser un lenguaje **interpretado**, los scripts se ejecutan directamente sin necesidad de compilaci√≥n, lo que favorece la exploraci√≥n interactiva.

-   R es **multiplataforma**: se puede instalar y ejecutar en Linux, Windows y macOS con un comportamiento consistente.

-   Adem√°s, es **software libre** distribuido bajo licencia GNU-GPL, lo que permite su uso, modificaci√≥n y redistribuci√≥n sin restricciones.

Para instalarlo en Windows, se debe descargar el instalador desde el [**sitio oficial del proyecto R (CRAN)**](https://cran.rstudio.com/) y seguir los pasos guiados. Una vez finalizada la instalaci√≥n, R estar√° listo para usarse desde cualquier entorno compatible. Sin embargo, si no se cuenta con experiencia previa en programaci√≥n, no se recomienda utilizar R directamente desde su consola nativa.

## ¬øQu√© es RStudio?

[RStudio Desktop (2025, Posit Software)](https://posit.co/products/open-source/rstudio/) es un entorno de desarrollo integrado (IDE) dise√±ado espec√≠ficamente para facilitar el trabajo con R. Proporciona una interfaz unificada que incluye editor de scripts, consola de R, entorno, explorador de archivos, panel de gr√°ficos y ayuda, entre otros, optimizando el flujo de trabajo.

![](/images/RStudio.png){fig-align="center"}

Entre sus principales ventajas se encuentran:

-   **Asistente de c√≥digo**: al escribir en el editor o la consola, la tecla **Tab** activa el autocompletado de funciones, nombres de objetos y argumentos, agilizando la escritura y reduciendo errores de sintaxis. En versiones recientes, el asistente tambi√©n permite la previsualizaci√≥n de colores en los gr√°ficos, resaltar los par√©ntesis de cierre en funciones anidadas con distintos colores y gestionar autom√°ticamente la indentaci√≥n del c√≥digo.

    ![](/images/asistente.png)

-   **Ayuda en l√≠nea**: al posicionar el cursor sobre el nombre de una funci√≥n en el editor y presionar **F1**, se accede directamente a la documentaci√≥n correspondiente en el panel **Help** (habitualmente ubicado en la esquina inferior derecha).

    ![](/images/help.png)

-   **Historial de comandos**: en la consola, al usar las teclas de flecha arriba/abajo, se puede navegar por los comandos ejecutados durante la sesi√≥n actual. Adem√°s, el panel **History** (parte superior derecha) almacena los comandos de todas las sesiones previas, permitiendo reutilizarlos con un clic en **To Console** (Enter) o **To Source** (Shift + Enter), seg√∫n se desee insertarlos en la consola o en el script activo.

    ![](/images/historial.png)

RStudio es multiplataforma, de c√≥digo abierto, y permite una integraci√≥n fluida con herramientas del ecosistema R, como R Markdown, Quarto, control de versiones y manejo de proyectos.

::: {.callout-note appearance="simple"}
Una vez instalados [R](https://cran.rstudio.com/) y [RStudio](https://posit.co/download/rstudio-desktop/), ya contamos con todo lo necesario para comenzar a trabajar. Aunque instalamos ambos programas, en la pr√°ctica s√≥lo necesitamos abrir **RStudio**, que utiliza a R como motor de ejecuci√≥n.
:::

### Proyectos en RStudio

Los proyectos de RStudio permiten organizar de forma estructurada todo el material asociado a un an√°lisis: scripts, informes, bases de datos, im√°genes, etc. Cada proyecto se vincula a una carpeta espec√≠fica del sistema de archivos, y RStudio la utiliza como directorio de trabajo por defecto. Esto facilita la importaci√≥n de datos y evita errores relacionados con rutas relativas o absolutas.

Para crear un nuevo proyecto, se puede utilizar el men√∫ **File \> New Project...** o el acceso directo **New Project...** ubicado en la esquina superior derecha de la interfaz. En ambos casos, se abre un asistente con tres opciones:

![](/images/proyecto.png){fig-align="center"}

-   **New Directory**: crea una nueva carpeta para el proyecto. Es la opci√≥n m√°s habitual.

-   **Existing Directory**: vincula el proyecto a una carpeta ya existente que contenga archivos previos.

-   **Version Control**: permite clonar un repositorio (Git o SVN). Esta opci√≥n no se utilizar√° en este curso.

Trabajar con proyectos garantiza que, al importar archivos, RStudio los busque autom√°ticamente dentro de la carpeta correspondiente. Adem√°s, cada proyecto mantiene su propio entorno de trabajo, lo que significa que al cerrar o cambiar de proyecto, se conserva la configuraci√≥n previa sin interferencias.

Cuando un proyecto ya existe, dentro de la carpeta encontraremos un archivo con extensi√≥n `.Rproj` que al ejecutarlo abre una nueva sesi√≥n de RStudio con el proyecto activo. Otras opciones son abrir desde **File \>** **Open Project...** o desde el √≠cono ![](/images/clipboard-1258435282.png) en la esquina superior derecha de RStudio. Esta √∫ltima opci√≥n tambi√©n mantiene un historial de los proyectos abiertos recientemente, lo que permite acceder r√°pidamente a ellos mediante accesos directos.

### Scripts en RStudio

Un script es un archivo de texto plano que contiene instrucciones escritas en R. Permite guardar, reutilizar y compartir el c√≥digo, favoreciendo la reproducibilidad del an√°lisis.

-   **Crear un nuevo script:** podemos crear un script desde el men√∫ **File \> New File \> R Script** (acceso r√°pido: `Ctrl + Shift + N`) o haciendo clic en el √≠cono de la hoja (üìÑ) con s√≠mbolo "+" en la barra de herramientas.

-   **Ejecutar c√≥digo:** la forma habitual de ejecutar un script es l√≠nea por l√≠nea, con `Ctrl + Enter` o el bot√≥n **Run** (![](/images/clipboard-140247137.png)). El cursor debe estar en cualquier punto de la l√≠nea a ejecutar. Tras la ejecuci√≥n, el cursor avanza autom√°ticamente a la siguiente l√≠nea de c√≥digo.

-   **Editar un script:** las l√≠neas del script pueden editarse directamente. Cada vez que se realiza una modificaci√≥n, es necesario volver a ejecutar esas l√≠neas para actualizar los resultados.

-   **Guardar un script:** Para guardar los cambios, se puede usar el √≠cono del diskette (üíæ), el men√∫ **File \> Save**, o el atajo `Ctrl + S`. Para guardar con otro nombre o ubicaci√≥n, utilizar **File \> Save As...**

-   **Abrir un script existente:** Los archivos de script tienen extensi√≥n `.R`. Pueden abrirse desde el panel **File \> Open File‚Ä¶**, el panel **Files** o usando el atajo de teclado `Ctrl + O`. Al abrirse, se muestran en una nueva pesta√±a del editor.

## Funciones

En R, los comandos b√°sicos se denominan **funciones**. Muchas de ellas est√°n incluidas en el n√∫cleo del lenguaje (conocido como **R base**) y se denominan *integradas*, mientras que otras forman parte de paquetes adicionales.

Cada funci√≥n tiene un **nombre** y suele requerir uno o m√°s **argumentos** (tambi√©n llamados *par√°metros*), que se escriben entre par√©ntesis y separados por comas. Incluso las funciones que no requieren argumentos deben escribirse con par√©ntesis vac√≠os.

```{r}
#| eval: false
# Sintaxis general
nombre_de_la_funci√≥n(arg1, arg2, ...)
```

Las funciones siempre ejecutan una **acci√≥n** o **devuelven un valor**, que puede ser visualizado, almacenado o utilizado en otras operaciones.

#### Reglas de sintaxis

Dado que R es un lenguaje interpretado, la **sintaxis debe ser estrictamente correcta**. Algunos puntos clave:

-   Los argumentos pueden escribirse con el **nombre del par√°metro seguido de un signo igual**:

    ```{r}
    #| eval: false
    funcion(arg1 = 32, arg2 = 5, arg3 = 65)
    ```

-   Tambi√©n se pueden omitir los nombres y escribir directamente los valores. En ese caso, **el orden importa** y debe coincidir con el definido en la documentaci√≥n de la funci√≥n:

    ```{r}
    #| eval: false
    funcion(32, 5, 65)
    ```

#### Tipos de argumentos

Los argumentos pueden ser:

-   Valores num√©ricos: `3`, `10.5`

-   L√≥gicos: `TRUE`, `FALSE`

-   Especiales: `NA` (faltante), `NULL`, `Inf`

-   Texto: debe escribirse entre comillas, por ejemplo `"menos"`

-   Objetos: como variables previamente creadas (`x`, `datos`, etc.)

    ```{r}
    #| eval: false

    funcion(arg1 = 3, arg2 = NA, arg3 = TRUE, arg4 = "menos", arg5 = x) 
    ```

## Paquetes

R se compone de un sistema base y de paquetes (*librer√≠as*) que ampl√≠an sus funcionalidades. Un **paquete** es una colecci√≥n de funciones, datos y documentaci√≥n que extiende las capacidades del lenguaje para tareas espec√≠ficas.

Existen distintos tipos de paquetes:

-   **Base**: se instalan y activan junto con R.

-   **Recomendados**: tambi√©n se instalan por defecto, pero requieren ser cargados manualmente.

-   **Adicionales**: m√°s de 17.000 disponibles en el repositorio oficial [CRAN](https://cran.r-project.org/web/packages/), listos para ser instalados seg√∫n necesidad. Adem√°s, algunos paquetes pueden descargarse desde otros repositorios como GitHub y Bioconductor.

Al ser *open source*, cualquier persona puede desarrollar y publicar nuevos paquetes. Esto convierte a R en una herramienta en constante evoluci√≥n.

### Instalaci√≥n

Los paquetes pueden instalarse desde **R o RStudio** o (si no hay acceso a internet o trabajamos con conexiones de uso medido) desde **archivos locales** `.zip` o `.tar.gz`, descargados previamente desde CRAN u otros repositorios.

En RStudio, los paquetes se gestionan desde la pesta√±a **Packages** (bloque inferior derecho). Para instalar uno nuevo:

1.  Hacer clic en ![](/images/clipboard-2796062224.png), se abrir√° una ventana emergente:

![](/images/paquetes.png){fig-align="center"}

2.  Especificar el nombre del paquete a instalar.

3.  Marcar la opci√≥n **Install dependencies** para incluir autom√°ticamente sus dependencias.

4.  Al presionar el bot√≥n **Install**, R internamente traduce esta acci√≥n a la funci√≥n `install.packages()`.

Los paquetes deben instalarse **una √∫nica vez por computadora** cuando se los va a utilizar por primera vez. A partir de entonces, s√≥lo es necesario **cargarlos al inicio de cada sesi√≥n** mediante la funci√≥n `library()`:

```{r}
#| eval: false
library(nombre_del_paquete)
```

### Dependencias

Muchos paquetes requieren funciones de otros paquetes para funcionar. Estos paquetes (**dependencias**) deben estar instaladas previamente, de lo contrario la ejecuci√≥n de una funci√≥n puede fallar por no encontrar otra interna. Por eso, es recomendable dejar seleccionada la opci√≥n *Install dependencies* al instalar.

### Paquetes a instalar

Para trabajar durante el curso, deberemos instalar los siguientes paquetes y sus dependencias:

```{r}
#| eval: false
# Manejo de datos
install.packages("tidyverse", dependencies = T)

install.packages("janitor", dependencies = T)

# Modelos de meta-an√°lisis
install.packages("metafor", dependencies = T)

install.packages("meta", dependencies = T)

# Paletas aptas para daltonismo
install.packages("scico", dependencies = T)

# Visualizaci√≥n avanzada
remotes::install_github("daniel1noble/orchaRd")
```

## Objetos

En R, los datos, resultados, funciones y estructuras se almacenan en **objetos**, que constituyen la unidad fundamental de trabajo en el lenguaje.

Para **crear un objeto**, se utiliza el operador de asignaci√≥n `<-` (tambi√©n se acepta `=` aunque no se recomienda) para asignar un valor a un nombre:

```{r}
#| eval: false 
x <- 10 
```

En este ejemplo, el n√∫mero `10` se asigna al objeto llamado `x`. A partir de ese momento, podemos utilizar `x` en otras operaciones:

```{r}
#| eval: false 
x + 5  # devuelve 15
```

Los nombres de objetos:

-   Deben comenzar con una letra y pueden incluir letras, n√∫meros, puntos (`.`) y guiones bajos (`_`).

-   No deben coincidir con palabras reservadas a funciones del lenguaje.

-   Son **sensibles a may√∫sculas/min√∫sculas**: `Edad` y `edad` son objetos distintos.

Los objetos *contenedores de datos* m√°s simples pertenecen a **cinco clases** que se denominan *at√≥micas* y que son los siguientes tipos de datos:

-   `integer`: n√∫meros enteros.

-   `numeric`: n√∫meros reales (tambi√©n llamados "doble precisi√≥n").

-   `complex`: n√∫meros complejos.

-   `character`: cadenas de texto o caracteres.

-   `logical`: valores l√≥gicos (`TRUE` o `FALSE`).

    ```{r}
    #| eval: false
    n√∫mero <- 25           # entero
    decimal <- 3.14        # num√©rico
    texto <- "Hola"        # car√°cter
    logico <- TRUE         # l√≥gico (booleano)
    ```

Adem√°s de los tipos at√≥micos, los datos pueden organizarse en **estructuras contenedoras** que permiten agrupar m√∫ltiples valores:

-   **Vector**: conjunto de elementos del mismo tipo, ordenados linealmente. Se construye con la funci√≥n `c()`.

-   **Lista**: colecci√≥n ordenada de objetos de distinto tipo o longitud, creada con `list()`.

-   **Dataframe**: estructura bidimensional donde cada columna es un vector del mismo largo (generalmente del mismo tipo). Se construye con `data.frame()` o, en el `tidyverse`, con `tibble()`.

    ```{r}
    #| eval: false
    # Vector
    vector  <- c(1, 2, 3, 4)

    # Lista
    lista <- list(vector, "elemento_2") # lista

    # Dataframe (R base)
    dataframe <- data.frame(
      var1 = vector,
      var2 = vector + 5,
      var3 = vector * vector^2
    )

    # Dataframe (tidyverse)
    tibble <- tibble(
      var1 = vector,
      var2 = vector + 5,
      var3 = vector * vector^2
    )
    ```

## Archivos de datos

R permite importar tablas de datos desde diversos formatos, tanto utilizando funciones de **R base** como funciones provistas por paquetes espec√≠ficos.

El formato m√°s com√∫n es el **texto plano** (ASCII), donde los valores est√°n organizados en columnas separadas por caracteres delimitadores. Los separadores m√°s habituales incluyen:

-   Coma (`,`)

-   Punto y coma (`;`)

-   Tabulaci√≥n (`\t`)

-   Barra vertical (`|`)

Estos archivos suelen tener una **cabecera** (header) en la primera fila con los nombres de las variables, y cada columna debe contener datos del mismo tipo (n√∫meros, texto, l√≥gicos, etc.).

Para importar correctamente un archivo es importante conocer su estructura:

-   Si incluye o no cabecera.

-   Qu√© car√°cter se usa como separador.

-   El tipo de codificaci√≥n (UTF-8, Latin1, etc.).

Dado que son archivos de texto, pueden visualizarse con editores simples como el Bloc de Notas o desde RStudio, lo que facilita su inspecci√≥n previa.

Para cargar los datos desde un archivo de texto plano o una hoja de c√°lculo de Excel usamos el c√≥digo:

```{r}
#| eval: false
datos <- read.xxx("mis_datos.txt")
```

(Se debe reemplazar `read.xxx()` por la funci√≥n correspondiente: `read.table()`, `read.csv()`, `read_delim()`, `read_excel()`, etc., seg√∫n el caso).

R tambi√©n permite cargar bases de datos incluidas en paquetes instalados mediante:

```{r}
#| eval: false
data(nombre_datos)

datos <- nombre_datos
```

## Buenas pr√°cticas

Adoptar buenas pr√°cticas desde el inicio mejora la reproducibilidad, facilita el trabajo colaborativo y reduce errores. Algunas recomendaciones clave son:

-   Trabajar siempre dentro de un **proyecto de RStudio** (`.Rproj`). Esto permite organizar los archivos, mantener rutas relativas consistentes y acceder a funcionalidades espec√≠ficas como control de versiones o panel de archivos integrados.

-   Incluir al comienzo de cada script las l√≠neas de **activaci√≥n de paquetes** necesarios, utilizando la funci√≥n `library()`.

-   **Cargar los datos** una vez activados los paquetes, para garantizar que todas las funciones requeridas est√©n disponibles.

-   Documentar el c√≥digo mediante **comentarios** iniciados con `#`. Esto permite entender qu√© hace cada bloque de c√≥digo, facilitando futuras modificaciones o revisiones.

-   **Usar espacios e indentaci√≥n adecuada** para mejorar la legibilidad. Esto es especialmente importante en estructuras anidadas (como condicionales, bucles o funciones).

Una gu√≠a de estilo ampliamente recomendada ‚Äîaunque no oficial‚Äî es la de `tidyverse`. Incluye ejemplos concretos de buenas y malas pr√°cticas para nombrar variables, manejar l√≠neas largas, usar sangr√≠as, entre otros aspectos. Puede consultarse en: <https://style.tidyverse.org/>

::: {.callout-caution appearance="simple"}
### Importante

Este apunte ofrece un resumen general para quienes deseen repasar los aspectos b√°sicos de R y RStudio.

Si no cuentan con experiencia previa en R y necesitan una introducci√≥n m√°s detallada, pod√©s consultar los siguientes recursos:

-   **Curso de Epidemiolog√≠a Nivel Avanzado** - [Unidad 1: Introducci√≥n a R](https://datos-ine.github.io/unidad_1/intro_R.html)

-   **EpiR Handbook** ‚Äì secciones [Aspectos b√°sicos](https://www.epirhandbook.com/es/new_pages/basics.es.html) y [Gesti√≥n de datos](https://www.epirhandbook.com/es/new_pages/cleaning.es.html).

Ante cualquier duda espec√≠fica, recuerden que pueden comunicarse con los/as docentes del curso.
:::
